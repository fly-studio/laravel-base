{"version":3,"sources":["webpack:///webpack/bootstrap 9e9474862b6f36954f67","webpack:///./public/static/js/laravel-echo/laravel-echo.node.js","webpack:///./node_modules/_laravel-echo@1.5.3@laravel-echo/dist/echo.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_laravelEcho","window","laravel_echo","Echo","__webpack_exports__","value","classCallCheck","instance","Constructor","TypeError","createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","_extends","assign","arguments","source","inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","possibleConstructorReturn","self","ReferenceError","Connector","options","this","_defaultOptions","auth","headers","authEndpoint","broadcaster","csrfToken","host","namespace","setOptions","connect","selector","document","querySelector","getAttribute","Channel","event","callback","listen","EventFormatter","setNamespace","charAt","substr","replace","PusherChannel","_Channel","pusher","_this","getPrototypeOf","eventFormatter","subscribe","subscription","unsubscribe","on","format","unbind","bind","PusherPrivateChannel","_PusherChannel","apply","eventName","data","channels","trigger","PusherPresenceChannel","keys","members","map","k","member","info","SocketIoChannel","socket","events","configureReconnector","emit","channel","removeListener","_this2","listener","_this3","push","_this4","forEach","SocketIoPrivateChannel","_SocketIoChannel","SocketIoPresenceChannel","_SocketIoPrivateChann","user_info","NullChannel","NullPrivateChannel","_NullChannel","NullPresenceChannel","PusherConnector","_Connector","client","Pusher","index","leaveChannel","connection","socket_id","disconnect","SocketIoConnector","io","getSocketIO","Error","id","NullConnector","registerInterceptors","_channel","connector","presenceChannel","leave","privateChannel","socketId","Vue","http","registerVueRequestInterceptor","axios","registerAxiosRequestInterceptor","jQuery","registerjQueryAjaxSetup","interceptors","request","next","set","use","config","ajax","ajaxSetup","beforeSend","xhr","setRequestHeader"],"mappings":"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","file":"/static/js/laravel-echo/laravel-echo.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 85);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9e9474862b6f36954f67","import Echo from \"laravel-echo\"\r\n\r\nwindow.laravel_echo = Echo;\r\n\n\n\n// WEBPACK FOOTER //\n// ./public/static/js/laravel-echo/laravel-echo.node.js","var classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Connector = function () {\n    /**\n     * Create a new class instance.\n     */\n    function Connector(options) {\n        classCallCheck(this, Connector);\n\n        /**\n         * Default connector options.\n         */\n        this._defaultOptions = {\n            auth: {\n                headers: {}\n            },\n            authEndpoint: '/broadcasting/auth',\n            broadcaster: 'pusher',\n            csrfToken: null,\n            host: null,\n            key: null,\n            namespace: 'App.Events'\n        };\n        this.setOptions(options);\n        this.connect();\n    }\n    /**\n     * Merge the custom options with the defaults.\n     */\n\n\n    createClass(Connector, [{\n        key: 'setOptions',\n        value: function setOptions(options) {\n            this.options = _extends(this._defaultOptions, options);\n            if (this.csrfToken()) {\n                this.options.auth.headers['X-CSRF-TOKEN'] = this.csrfToken();\n            }\n            return options;\n        }\n        /**\n         * Extract the CSRF token from the page.\n         */\n\n    }, {\n        key: 'csrfToken',\n        value: function csrfToken() {\n            var selector = void 0;\n            if (typeof window !== 'undefined' && window['Laravel'] && window['Laravel'].csrfToken) {\n                return window['Laravel'].csrfToken;\n            } else if (this.options.csrfToken) {\n                return this.options.csrfToken;\n            } else if (typeof document !== 'undefined' && (selector = document.querySelector('meta[name=\"csrf-token\"]'))) {\n                return selector.getAttribute('content');\n            }\n            return null;\n        }\n    }]);\n    return Connector;\n}();\n\n/**\n * This class represents a basic channel.\n */\nvar Channel = function () {\n  function Channel() {\n    classCallCheck(this, Channel);\n  }\n\n  createClass(Channel, [{\n    key: 'listenForWhisper',\n\n    /**\n     * Listen for a whisper event on the channel instance.\n     */\n    value: function listenForWhisper(event, callback) {\n      return this.listen('.client-' + event, callback);\n    }\n    /**\n     * Listen for an event on the channel instance.\n     */\n\n  }, {\n    key: 'notification',\n    value: function notification(callback) {\n      return this.listen('.Illuminate\\\\Notifications\\\\Events\\\\BroadcastNotificationCreated', callback);\n    }\n  }]);\n  return Channel;\n}();\n\n/**\n * Event name formatter\n */\nvar EventFormatter = function () {\n    /**\n     * Create a new class instance.\n     */\n    function EventFormatter(namespace) {\n        classCallCheck(this, EventFormatter);\n\n        this.setNamespace(namespace);\n    }\n    /**\n     * Format the given event name.\n     */\n\n\n    createClass(EventFormatter, [{\n        key: 'format',\n        value: function format(event) {\n            if (event.charAt(0) === '.' || event.charAt(0) === '\\\\') {\n                return event.substr(1);\n            } else if (this.namespace) {\n                event = this.namespace + '.' + event;\n            }\n            return event.replace(/\\./g, '\\\\');\n        }\n        /**\n         * Set the event namespace.\n         */\n\n    }, {\n        key: 'setNamespace',\n        value: function setNamespace(value) {\n            this.namespace = value;\n        }\n    }]);\n    return EventFormatter;\n}();\n\n/**\n * This class represents a Pusher channel.\n */\nvar PusherChannel = function (_Channel) {\n    inherits(PusherChannel, _Channel);\n\n    /**\n     * Create a new class instance.\n     */\n    function PusherChannel(pusher, name, options) {\n        classCallCheck(this, PusherChannel);\n\n        var _this = possibleConstructorReturn(this, (PusherChannel.__proto__ || Object.getPrototypeOf(PusherChannel)).call(this));\n\n        _this.name = name;\n        _this.pusher = pusher;\n        _this.options = options;\n        _this.eventFormatter = new EventFormatter(_this.options.namespace);\n        _this.subscribe();\n        return _this;\n    }\n    /**\n     * Subscribe to a Pusher channel.\n     */\n\n\n    createClass(PusherChannel, [{\n        key: 'subscribe',\n        value: function subscribe() {\n            this.subscription = this.pusher.subscribe(this.name);\n        }\n        /**\n         * Unsubscribe from a Pusher channel.\n         */\n\n    }, {\n        key: 'unsubscribe',\n        value: function unsubscribe() {\n            this.pusher.unsubscribe(this.name);\n        }\n        /**\n         * Listen for an event on the channel instance.\n         */\n\n    }, {\n        key: 'listen',\n        value: function listen(event, callback) {\n            this.on(this.eventFormatter.format(event), callback);\n            return this;\n        }\n        /**\n         * Stop listening for an event on the channel instance.\n         */\n\n    }, {\n        key: 'stopListening',\n        value: function stopListening(event) {\n            this.subscription.unbind(this.eventFormatter.format(event));\n            return this;\n        }\n        /**\n         * Bind a channel to an event.\n         */\n\n    }, {\n        key: 'on',\n        value: function on(event, callback) {\n            this.subscription.bind(event, callback);\n            return this;\n        }\n    }]);\n    return PusherChannel;\n}(Channel);\n\n/**\n * This class represents a Pusher private channel.\n */\nvar PusherPrivateChannel = function (_PusherChannel) {\n    inherits(PusherPrivateChannel, _PusherChannel);\n\n    function PusherPrivateChannel() {\n        classCallCheck(this, PusherPrivateChannel);\n        return possibleConstructorReturn(this, (PusherPrivateChannel.__proto__ || Object.getPrototypeOf(PusherPrivateChannel)).apply(this, arguments));\n    }\n\n    createClass(PusherPrivateChannel, [{\n        key: 'whisper',\n\n        /**\n         * Trigger client event on the channel.\n         */\n        value: function whisper(eventName, data) {\n            this.pusher.channels.channels[this.name].trigger('client-' + eventName, data);\n            return this;\n        }\n    }]);\n    return PusherPrivateChannel;\n}(PusherChannel);\n\n/**\n * This class represents a Pusher presence channel.\n */\nvar PusherPresenceChannel = function (_PusherChannel) {\n    inherits(PusherPresenceChannel, _PusherChannel);\n\n    function PusherPresenceChannel() {\n        classCallCheck(this, PusherPresenceChannel);\n        return possibleConstructorReturn(this, (PusherPresenceChannel.__proto__ || Object.getPrototypeOf(PusherPresenceChannel)).apply(this, arguments));\n    }\n\n    createClass(PusherPresenceChannel, [{\n        key: 'here',\n\n        /**\n         * Register a callback to be called anytime the member list changes.\n         */\n        value: function here(callback) {\n            this.on('pusher:subscription_succeeded', function (data) {\n                callback(Object.keys(data.members).map(function (k) {\n                    return data.members[k];\n                }));\n            });\n            return this;\n        }\n        /**\n         * Listen for someone joining the channel.\n         */\n\n    }, {\n        key: 'joining',\n        value: function joining(callback) {\n            this.on('pusher:member_added', function (member) {\n                callback(member.info);\n            });\n            return this;\n        }\n        /**\n         * Listen for someone leaving the channel.\n         */\n\n    }, {\n        key: 'leaving',\n        value: function leaving(callback) {\n            this.on('pusher:member_removed', function (member) {\n                callback(member.info);\n            });\n            return this;\n        }\n        /**\n         * Trigger client event on the channel.\n         */\n\n    }, {\n        key: 'whisper',\n        value: function whisper(eventName, data) {\n            this.pusher.channels.channels[this.name].trigger('client-' + eventName, data);\n            return this;\n        }\n    }]);\n    return PusherPresenceChannel;\n}(PusherChannel);\n\n/**\n * This class represents a Socket.io channel.\n */\nvar SocketIoChannel = function (_Channel) {\n    inherits(SocketIoChannel, _Channel);\n\n    /**\n     * Create a new class instance.\n     */\n    function SocketIoChannel(socket, name, options) {\n        classCallCheck(this, SocketIoChannel);\n\n        /**\n         * The event callbacks applied to the channel.\n         */\n        var _this = possibleConstructorReturn(this, (SocketIoChannel.__proto__ || Object.getPrototypeOf(SocketIoChannel)).call(this));\n\n        _this.events = {};\n        _this.name = name;\n        _this.socket = socket;\n        _this.options = options;\n        _this.eventFormatter = new EventFormatter(_this.options.namespace);\n        _this.subscribe();\n        _this.configureReconnector();\n        return _this;\n    }\n    /**\n     * Subscribe to a Socket.io channel.\n     */\n\n\n    createClass(SocketIoChannel, [{\n        key: 'subscribe',\n        value: function subscribe() {\n            this.socket.emit('subscribe', {\n                channel: this.name,\n                auth: this.options.auth || {}\n            });\n        }\n        /**\n         * Unsubscribe from channel and ubind event callbacks.\n         */\n\n    }, {\n        key: 'unsubscribe',\n        value: function unsubscribe() {\n            this.unbind();\n            this.socket.emit('unsubscribe', {\n                channel: this.name,\n                auth: this.options.auth || {}\n            });\n        }\n        /**\n         * Listen for an event on the channel instance.\n         */\n\n    }, {\n        key: 'listen',\n        value: function listen(event, callback) {\n            this.on(this.eventFormatter.format(event), callback);\n            return this;\n        }\n        /**\n         * Stop listening for an event on the channel instance.\n         */\n\n    }, {\n        key: 'stopListening',\n        value: function stopListening(event) {\n            var name = this.eventFormatter.format(event);\n            this.socket.removeListener(name);\n            delete this.events[name];\n            return this;\n        }\n        /**\n         * Bind the channel's socket to an event and store the callback.\n         */\n\n    }, {\n        key: 'on',\n        value: function on(event, callback) {\n            var _this2 = this;\n\n            var listener = function listener(channel, data) {\n                if (_this2.name == channel) {\n                    callback(data);\n                }\n            };\n            this.socket.on(event, listener);\n            this.bind(event, listener);\n        }\n        /**\n         * Attach a 'reconnect' listener and bind the event.\n         */\n\n    }, {\n        key: 'configureReconnector',\n        value: function configureReconnector() {\n            var _this3 = this;\n\n            var listener = function listener() {\n                _this3.subscribe();\n            };\n            this.socket.on('reconnect', listener);\n            this.bind('reconnect', listener);\n        }\n        /**\n         * Bind the channel's socket to an event and store the callback.\n         */\n\n    }, {\n        key: 'bind',\n        value: function bind(event, callback) {\n            this.events[event] = this.events[event] || [];\n            this.events[event].push(callback);\n        }\n        /**\n         * Unbind the channel's socket from all stored event callbacks.\n         */\n\n    }, {\n        key: 'unbind',\n        value: function unbind() {\n            var _this4 = this;\n\n            Object.keys(this.events).forEach(function (event) {\n                _this4.events[event].forEach(function (callback) {\n                    _this4.socket.removeListener(event, callback);\n                });\n                delete _this4.events[event];\n            });\n        }\n    }]);\n    return SocketIoChannel;\n}(Channel);\n\n/**\n * This class represents a Socket.io presence channel.\n */\nvar SocketIoPrivateChannel = function (_SocketIoChannel) {\n    inherits(SocketIoPrivateChannel, _SocketIoChannel);\n\n    function SocketIoPrivateChannel() {\n        classCallCheck(this, SocketIoPrivateChannel);\n        return possibleConstructorReturn(this, (SocketIoPrivateChannel.__proto__ || Object.getPrototypeOf(SocketIoPrivateChannel)).apply(this, arguments));\n    }\n\n    createClass(SocketIoPrivateChannel, [{\n        key: 'whisper',\n\n        /**\n         * Trigger client event on the channel.\n         */\n        value: function whisper(eventName, data) {\n            this.socket.emit('client event', {\n                channel: this.name,\n                event: 'client-' + eventName,\n                data: data\n            });\n            return this;\n        }\n    }]);\n    return SocketIoPrivateChannel;\n}(SocketIoChannel);\n\n/**\n * This class represents a Socket.io presence channel.\n */\nvar SocketIoPresenceChannel = function (_SocketIoPrivateChann) {\n    inherits(SocketIoPresenceChannel, _SocketIoPrivateChann);\n\n    function SocketIoPresenceChannel() {\n        classCallCheck(this, SocketIoPresenceChannel);\n        return possibleConstructorReturn(this, (SocketIoPresenceChannel.__proto__ || Object.getPrototypeOf(SocketIoPresenceChannel)).apply(this, arguments));\n    }\n\n    createClass(SocketIoPresenceChannel, [{\n        key: 'here',\n\n        /**\n         * Register a callback to be called anytime the member list changes.\n         */\n        value: function here(callback) {\n            this.on('presence:subscribed', function (members) {\n                callback(members.map(function (m) {\n                    return m.user_info;\n                }));\n            });\n            return this;\n        }\n        /**\n         * Listen for someone joining the channel.\n         */\n\n    }, {\n        key: 'joining',\n        value: function joining(callback) {\n            this.on('presence:joining', function (member) {\n                return callback(member.user_info);\n            });\n            return this;\n        }\n        /**\n         * Listen for someone leaving the channel.\n         */\n\n    }, {\n        key: 'leaving',\n        value: function leaving(callback) {\n            this.on('presence:leaving', function (member) {\n                return callback(member.user_info);\n            });\n            return this;\n        }\n    }]);\n    return SocketIoPresenceChannel;\n}(SocketIoPrivateChannel);\n\n/**\n * This class represents a null channel.\n */\nvar NullChannel = function (_Channel) {\n  inherits(NullChannel, _Channel);\n\n  function NullChannel() {\n    classCallCheck(this, NullChannel);\n    return possibleConstructorReturn(this, (NullChannel.__proto__ || Object.getPrototypeOf(NullChannel)).apply(this, arguments));\n  }\n\n  createClass(NullChannel, [{\n    key: 'subscribe',\n\n    /**\n     * Subscribe to a channel.\n     */\n    value: function subscribe() {}\n    //\n\n    /**\n     * Unsubscribe from a channel.\n     */\n\n  }, {\n    key: 'unsubscribe',\n    value: function unsubscribe() {}\n    //\n\n    /**\n     * Listen for an event on the channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(event, callback) {\n      return this;\n    }\n    /**\n     * Stop listening for an event on the channel instance.\n     */\n\n  }, {\n    key: 'stopListening',\n    value: function stopListening(event) {\n      return this;\n    }\n    /**\n     * Bind a channel to an event.\n     */\n\n  }, {\n    key: 'on',\n    value: function on(event, callback) {\n      return this;\n    }\n  }]);\n  return NullChannel;\n}(Channel);\n\n/**\n * This class represents a null private channel.\n */\nvar NullPrivateChannel = function (_NullChannel) {\n  inherits(NullPrivateChannel, _NullChannel);\n\n  function NullPrivateChannel() {\n    classCallCheck(this, NullPrivateChannel);\n    return possibleConstructorReturn(this, (NullPrivateChannel.__proto__ || Object.getPrototypeOf(NullPrivateChannel)).apply(this, arguments));\n  }\n\n  createClass(NullPrivateChannel, [{\n    key: 'whisper',\n\n    /**\n     * Trigger client event on the channel.\n     */\n    value: function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n  return NullPrivateChannel;\n}(NullChannel);\n\n/**\n * This class represents a null presence channel.\n */\nvar NullPresenceChannel = function (_NullChannel) {\n  inherits(NullPresenceChannel, _NullChannel);\n\n  function NullPresenceChannel() {\n    classCallCheck(this, NullPresenceChannel);\n    return possibleConstructorReturn(this, (NullPresenceChannel.__proto__ || Object.getPrototypeOf(NullPresenceChannel)).apply(this, arguments));\n  }\n\n  createClass(NullPresenceChannel, [{\n    key: 'here',\n\n    /**\n     * Register a callback to be called anytime the member list changes.\n     */\n    value: function here(callback) {\n      return this;\n    }\n    /**\n     * Listen for someone joining the channel.\n     */\n\n  }, {\n    key: 'joining',\n    value: function joining(callback) {\n      return this;\n    }\n    /**\n     * Listen for someone leaving the channel.\n     */\n\n  }, {\n    key: 'leaving',\n    value: function leaving(callback) {\n      return this;\n    }\n    /**\n     * Trigger client event on the channel.\n     */\n\n  }, {\n    key: 'whisper',\n    value: function whisper(eventName, data) {\n      return this;\n    }\n  }]);\n  return NullPresenceChannel;\n}(NullChannel);\n\n/**\n * This class creates a connector to Pusher.\n */\nvar PusherConnector = function (_Connector) {\n    inherits(PusherConnector, _Connector);\n\n    function PusherConnector() {\n        classCallCheck(this, PusherConnector);\n\n        /**\n         * All of the subscribed channel names.\n         */\n        var _this = possibleConstructorReturn(this, (PusherConnector.__proto__ || Object.getPrototypeOf(PusherConnector)).apply(this, arguments));\n\n        _this.channels = {};\n        return _this;\n    }\n    /**\n     * Create a fresh Pusher connection.\n     */\n\n\n    createClass(PusherConnector, [{\n        key: 'connect',\n        value: function connect() {\n            if (typeof this.options.client !== 'undefined') {\n                this.pusher = this.options.client;\n            } else {\n                this.pusher = new Pusher(this.options.key, this.options);\n            }\n        }\n        /**\n         * Listen for an event on a channel instance.\n         */\n\n    }, {\n        key: 'listen',\n        value: function listen(name, event, callback) {\n            return this.channel(name).listen(event, callback);\n        }\n        /**\n         * Get a channel instance by name.\n         */\n\n    }, {\n        key: 'channel',\n        value: function channel(name) {\n            if (!this.channels[name]) {\n                this.channels[name] = new PusherChannel(this.pusher, name, this.options);\n            }\n            return this.channels[name];\n        }\n        /**\n         * Get a private channel instance by name.\n         */\n\n    }, {\n        key: 'privateChannel',\n        value: function privateChannel(name) {\n            if (!this.channels['private-' + name]) {\n                this.channels['private-' + name] = new PusherPrivateChannel(this.pusher, 'private-' + name, this.options);\n            }\n            return this.channels['private-' + name];\n        }\n        /**\n         * Get a presence channel instance by name.\n         */\n\n    }, {\n        key: 'presenceChannel',\n        value: function presenceChannel(name) {\n            if (!this.channels['presence-' + name]) {\n                this.channels['presence-' + name] = new PusherPresenceChannel(this.pusher, 'presence-' + name, this.options);\n            }\n            return this.channels['presence-' + name];\n        }\n        /**\n         * Leave the given channel, as well as its private and presence variants.\n         */\n\n    }, {\n        key: 'leave',\n        value: function leave(name) {\n            var _this2 = this;\n\n            var channels = [name, 'private-' + name, 'presence-' + name];\n            channels.forEach(function (name, index) {\n                _this2.leaveChannel(name);\n            });\n        }\n        /**\n         * Leave the given channel.\n         */\n\n    }, {\n        key: 'leaveChannel',\n        value: function leaveChannel(name) {\n            if (this.channels[name]) {\n                this.channels[name].unsubscribe();\n                delete this.channels[name];\n            }\n        }\n        /**\n         * Get the socket ID for the connection.\n         */\n\n    }, {\n        key: 'socketId',\n        value: function socketId() {\n            return this.pusher.connection.socket_id;\n        }\n        /**\n         * Disconnect Pusher connection.\n         */\n\n    }, {\n        key: 'disconnect',\n        value: function disconnect() {\n            this.pusher.disconnect();\n        }\n    }]);\n    return PusherConnector;\n}(Connector);\n\n/**\n * This class creates a connnector to a Socket.io server.\n */\nvar SocketIoConnector = function (_Connector) {\n    inherits(SocketIoConnector, _Connector);\n\n    function SocketIoConnector() {\n        classCallCheck(this, SocketIoConnector);\n\n        /**\n         * All of the subscribed channel names.\n         */\n        var _this = possibleConstructorReturn(this, (SocketIoConnector.__proto__ || Object.getPrototypeOf(SocketIoConnector)).apply(this, arguments));\n\n        _this.channels = {};\n        return _this;\n    }\n    /**\n     * Create a fresh Socket.io connection.\n     */\n\n\n    createClass(SocketIoConnector, [{\n        key: 'connect',\n        value: function connect() {\n            var io = this.getSocketIO();\n            this.socket = io(this.options.host, this.options);\n            return this.socket;\n        }\n        /**\n         * Get socket.io module from global scope or options.\n         */\n\n    }, {\n        key: 'getSocketIO',\n        value: function getSocketIO() {\n            if (typeof io !== 'undefined') {\n                return io;\n            }\n            if (typeof this.options.client !== 'undefined') {\n                return this.options.client;\n            }\n            throw new Error('Socket.io client not found. Should be globally available or passed via options.client');\n        }\n        /**\n         * Listen for an event on a channel instance.\n         */\n\n    }, {\n        key: 'listen',\n        value: function listen(name, event, callback) {\n            return this.channel(name).listen(event, callback);\n        }\n        /**\n         * Get a channel instance by name.\n         */\n\n    }, {\n        key: 'channel',\n        value: function channel(name) {\n            if (!this.channels[name]) {\n                this.channels[name] = new SocketIoChannel(this.socket, name, this.options);\n            }\n            return this.channels[name];\n        }\n        /**\n         * Get a private channel instance by name.\n         */\n\n    }, {\n        key: 'privateChannel',\n        value: function privateChannel(name) {\n            if (!this.channels['private-' + name]) {\n                this.channels['private-' + name] = new SocketIoPrivateChannel(this.socket, 'private-' + name, this.options);\n            }\n            return this.channels['private-' + name];\n        }\n        /**\n         * Get a presence channel instance by name.\n         */\n\n    }, {\n        key: 'presenceChannel',\n        value: function presenceChannel(name) {\n            if (!this.channels['presence-' + name]) {\n                this.channels['presence-' + name] = new SocketIoPresenceChannel(this.socket, 'presence-' + name, this.options);\n            }\n            return this.channels['presence-' + name];\n        }\n        /**\n         * Leave the given channel, as well as its private and presence variants.\n         */\n\n    }, {\n        key: 'leave',\n        value: function leave(name) {\n            var _this2 = this;\n\n            var channels = [name, 'private-' + name, 'presence-' + name];\n            channels.forEach(function (name) {\n                _this2.leaveChannel(name);\n            });\n        }\n        /**\n         * Leave the given channel.\n         */\n\n    }, {\n        key: 'leaveChannel',\n        value: function leaveChannel(name) {\n            if (this.channels[name]) {\n                this.channels[name].unsubscribe();\n                delete this.channels[name];\n            }\n        }\n        /**\n         * Get the socket ID for the connection.\n         */\n\n    }, {\n        key: 'socketId',\n        value: function socketId() {\n            return this.socket.id;\n        }\n        /**\n         * Disconnect Socketio connection.\n         */\n\n    }, {\n        key: 'disconnect',\n        value: function disconnect() {\n            this.socket.disconnect();\n        }\n    }]);\n    return SocketIoConnector;\n}(Connector);\n\n/**\n * This class creates a null connector.\n */\nvar NullConnector = function (_Connector) {\n  inherits(NullConnector, _Connector);\n\n  function NullConnector() {\n    classCallCheck(this, NullConnector);\n\n    /**\n     * All of the subscribed channel names.\n     */\n    var _this = possibleConstructorReturn(this, (NullConnector.__proto__ || Object.getPrototypeOf(NullConnector)).apply(this, arguments));\n\n    _this.channels = {};\n    return _this;\n  }\n  /**\n   * Create a fresh connection.\n   */\n\n\n  createClass(NullConnector, [{\n    key: 'connect',\n    value: function connect() {}\n    //\n\n    /**\n     * Listen for an event on a channel instance.\n     */\n\n  }, {\n    key: 'listen',\n    value: function listen(name, event, callback) {\n      return new NullChannel();\n    }\n    /**\n     * Get a channel instance by name.\n     */\n\n  }, {\n    key: 'channel',\n    value: function channel(name) {\n      return new NullChannel();\n    }\n    /**\n     * Get a private channel instance by name.\n     */\n\n  }, {\n    key: 'privateChannel',\n    value: function privateChannel(name) {\n      return new NullPrivateChannel();\n    }\n    /**\n     * Get a presence channel instance by name.\n     */\n\n  }, {\n    key: 'presenceChannel',\n    value: function presenceChannel(name) {\n      return new NullPresenceChannel();\n    }\n    /**\n     * Leave the given channel, as well as its private and presence variants.\n     */\n\n  }, {\n    key: 'leave',\n    value: function leave(name) {}\n    //\n\n    /**\n     * Leave the given channel.\n     */\n\n  }, {\n    key: 'leaveChannel',\n    value: function leaveChannel(name) {}\n    //\n\n    /**\n     * Get the socket ID for the connection.\n     */\n\n  }, {\n    key: 'socketId',\n    value: function socketId() {\n      return 'fake-socket-id';\n    }\n    /**\n     * Disconnect the connection.\n     */\n\n  }, {\n    key: 'disconnect',\n    value: function disconnect() {\n      //\n    }\n  }]);\n  return NullConnector;\n}(Connector);\n\n/**\n * This class is the primary API for interacting with broadcasting.\n */\n\nvar Echo = function () {\n    /**\n     * Create a new class instance.\n     */\n    function Echo(options) {\n        classCallCheck(this, Echo);\n\n        this.options = options;\n        this.connect();\n        this.registerInterceptors();\n    }\n    /**\n     * Get a channel instance by name.\n     */\n\n\n    createClass(Echo, [{\n        key: 'channel',\n        value: function channel(_channel) {\n            return this.connector.channel(_channel);\n        }\n        /**\n         * Create a new connection.\n         */\n\n    }, {\n        key: 'connect',\n        value: function connect() {\n            if (this.options.broadcaster == 'pusher') {\n                this.connector = new PusherConnector(this.options);\n            } else if (this.options.broadcaster == 'socket.io') {\n                this.connector = new SocketIoConnector(this.options);\n            } else if (this.options.broadcaster == 'null') {\n                this.connector = new NullConnector(this.options);\n            }\n        }\n        /**\n         * Disconnect from the Echo server.\n         */\n\n    }, {\n        key: 'disconnect',\n        value: function disconnect() {\n            this.connector.disconnect();\n        }\n        /**\n         * Get a presence channel instance by name.\n         */\n\n    }, {\n        key: 'join',\n        value: function join(channel) {\n            return this.connector.presenceChannel(channel);\n        }\n        /**\n         * Leave the given channel, as well as its private and presence variants.\n         */\n\n    }, {\n        key: 'leave',\n        value: function leave(channel) {\n            this.connector.leave(channel);\n        }\n        /**\n         * Leave the given channel.\n         */\n\n    }, {\n        key: 'leaveChannel',\n        value: function leaveChannel(channel) {\n            this.connector.leaveChannel(channel);\n        }\n        /**\n         * Listen for an event on a channel instance.\n         */\n\n    }, {\n        key: 'listen',\n        value: function listen(channel, event, callback) {\n            return this.connector.listen(channel, event, callback);\n        }\n        /**\n         * Get a private channel instance by name.\n         */\n\n    }, {\n        key: 'private',\n        value: function _private(channel) {\n            return this.connector.privateChannel(channel);\n        }\n        /**\n         * Get the Socket ID for the connection.\n         */\n\n    }, {\n        key: 'socketId',\n        value: function socketId() {\n            return this.connector.socketId();\n        }\n        /**\n         * Register 3rd party request interceptiors. These are used to automatically\n         * send a connections socket id to a Laravel app with a X-Socket-Id header.\n         */\n\n    }, {\n        key: 'registerInterceptors',\n        value: function registerInterceptors() {\n            if (typeof Vue === 'function' && Vue.http) {\n                this.registerVueRequestInterceptor();\n            }\n            if (typeof axios === 'function') {\n                this.registerAxiosRequestInterceptor();\n            }\n            if (typeof jQuery === 'function') {\n                this.registerjQueryAjaxSetup();\n            }\n        }\n        /**\n         * Register a Vue HTTP interceptor to add the X-Socket-ID header.\n         */\n\n    }, {\n        key: 'registerVueRequestInterceptor',\n        value: function registerVueRequestInterceptor() {\n            var _this = this;\n\n            Vue.http.interceptors.push(function (request, next) {\n                if (_this.socketId()) {\n                    request.headers.set('X-Socket-ID', _this.socketId());\n                }\n                next();\n            });\n        }\n        /**\n         * Register an Axios HTTP interceptor to add the X-Socket-ID header.\n         */\n\n    }, {\n        key: 'registerAxiosRequestInterceptor',\n        value: function registerAxiosRequestInterceptor() {\n            var _this2 = this;\n\n            axios.interceptors.request.use(function (config) {\n                if (_this2.socketId()) {\n                    config.headers['X-Socket-Id'] = _this2.socketId();\n                }\n                return config;\n            });\n        }\n        /**\n         * Register jQuery AjaxSetup to add the X-Socket-ID header.\n         */\n\n    }, {\n        key: 'registerjQueryAjaxSetup',\n        value: function registerjQueryAjaxSetup() {\n            var _this3 = this;\n\n            if (typeof jQuery.ajax != 'undefined') {\n                jQuery.ajaxSetup({\n                    beforeSend: function beforeSend(xhr) {\n                        if (_this3.socketId()) {\n                            xhr.setRequestHeader('X-Socket-Id', _this3.socketId());\n                        }\n                    }\n                });\n            }\n        }\n    }]);\n    return Echo;\n}();\n\nexport default Echo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_laravel-echo@1.5.3@laravel-echo/dist/echo.js\n// module id = 87\n// module chunks = 2"],"sourceRoot":""}